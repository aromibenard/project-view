// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid()) // Optional: only if you store user metadata locally
  clerkId   String    @unique // Clerk user ID
  projects  Project[]
  createdAt DateTime  @default(now())
}

model Project {
  id          String      @id @default(cuid())
  title       String
  description String
  publicToken String      @unique // Used for client-facing view
  isPublic    Boolean     @default(false) // Controls visibility via token
  userId      String // Clerk user ID
  user        User        @relation(fields: [userId], references: [clerkId])
  milestones  Milestone[]
  completed   Boolean     @default(false)
  completedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Milestone {
  id          String    @id @default(cuid())
  title       String
  order       Int       @default(0) // For sorting milestones
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  steps       Step[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
  completed   Boolean    @default(false)
}

model Step {
  id          String    @id @default(cuid())
  title       String
  completed   Boolean   @default(false)
  milestoneId String
  milestone   Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
}
