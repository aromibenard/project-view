generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  clerkId   String    @unique // Clerk user ID
  projects  Project[]
  createdAt DateTime  @default(now())
}

model Project {
  id                 String      @id @default(cuid())
  title              String
  description        String
  publicToken        String      @unique // Used for client-facing view
  isPublic           Boolean     @default(false) // Controls visibility via token
  userId             String // Clerk user ID
  user               User        @relation(fields: [userId], references: [clerkId])
  milestones         Milestone[]
  steps              Step[]
  completed          Boolean     @default(false)
  completedAt        DateTime?
  notificationSentAt DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  clientEmail        String?
  developerEmail     String?
  developers         Developer[] @relation("DeveloperProjects")
}

model Developer {
  id        String    @id @default(cuid())
  clerkId   String    @unique // Clerk ID for authentication
  name      String?
  xp        Int       @default(0)
  level     Int       @default(1)
  badges    String[]  @default([]) // Optional: gamified rewards
  projects  Project[] @relation("DeveloperProjects")
  createdAt DateTime  @default(now())
}

model Milestone {
  id                 String    @id @default(cuid())
  title              String
  order              Int       @default(0) // For sorting milestones
  projectId          String
  project            Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  steps              Step[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  completedAt        DateTime?
  completed          Boolean   @default(false)
  notificationSentAt DateTime?
  progressNotified   String[]  @default([])
}

model Step {
  id          String    @id @default(cuid())
  title       String
  completed   Boolean   @default(false)
  completedAt DateTime?
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  milestoneId String
  milestone   Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
}
